---
- name: Deploy Multi-App Stack
  hosts: app_servers
  become: true

  vars:
    # app_deploy_dir is now remote_app_dir from group_vars/all.yml
    # db_user, db_password, db_name are now from group_vars/all.yml

    # Path to the versions file in your local git checkout (where Jenkins runs Ansible)
    local_versions_file: "../../versions.yml" # Relative to this playbook
    # Path for storing version files on the remote server (using remote_app_dir)
    # remote_current_versions_file: "{{ remote_app_dir }}/versions.yml.current" # Handled by copy task
    # remote_previous_versions_file: "{{ remote_app_dir }}/versions.yml.previous" # Handled by copy task

  tasks:
    - name: Ensure deployment directory exists on remote server
      file:
        path: "{{ remote_app_dir }}" # Using var from group_vars
        state: directory
        mode: '0755'

    - name: Copy frontend HTML content to remote server
      copy:
        src: ../../apps/frontend/html/ # Source from the Ansible controller (Jenkins workspace)
        dest: "{{ remote_app_dir }}/frontend_html/" # Destination on vm2
        mode: '0644' # Set appropriate permissions for web content

    - name: Load application versions from local versions.yml
      include_vars:
        file: "{{ local_versions_file }}"
        name: loaded_versions # Loads into loaded_versions.image_versions.nginx etc.

    # No need for set_fact for image tags if docker-compose.yml.j2 uses loaded_versions.image_versions directly

    - name: (Rollback Prep) Backup existing current version file on remote to previous
      copy:
        remote_src: yes
        src: "{{ remote_app_dir }}/versions.yml.current"
        dest: "{{ remote_app_dir }}/versions.yml.previous"
        force: yes # Overwrite previous backup
      ignore_errors: yes # It's okay if the current file doesn't exist on first run

    - name: (Rollback Prep) Copy local versions.yml to remote as current version file
      copy:
        src: "{{ local_versions_file }}"
        dest: "{{ remote_app_dir }}/versions.yml.current"
        mode: '0644'

    - name: Display versions to be deployed
      debug:
        msg:
          - "Frontend (Nginx): {{ loaded_versions.image_versions.nginx }}"
          - "Backend (Python): {{ loaded_versions.image_versions.python_backend }}"
          - "Database (MySQL): {{ loaded_versions.image_versions.mysql }}"

    - name: Generate docker-compose.yml on remote server from template
      template:
        src: templates/docker-compose.yml.j2
        dest: "{{ remote_app_dir }}/docker-compose.yml"
        mode: '0644'
      vars:
        # Pass the entire image_versions structure to the template
        # The template docker-compose.yml.j2 accesses these as:
        # image: "{{ image_versions.nginx }}"
        # image: "{{ image_versions.python_backend }}"
        # image: "{{ image_versions.mysql }}"
        # db_user, db_password, db_name, db_root_password, remote_app_dir are automatically available from group_vars/all.yml
        image_versions: "{{ loaded_versions.image_versions }}"

    - name: Pull latest images defined in docker-compose.yml
      community.docker.docker_compose_v2:
        project_src: "{{ remote_app_dir }}"
        pull: missing
      # Note: Requires community.docker collection (ansible-galaxy collection install community.docker)

    - name: Run docker compose up -d
      community.docker.docker_compose_v2:
        project_src: "{{ remote_app_dir }}"
        state: present # Ensures services are running, recreates if config changed
        remove_orphans: yes # Removes containers for services not defined in compose file
      register: compose_status

    - name: Display Docker Compose status
      debug:
        var: compose_status 