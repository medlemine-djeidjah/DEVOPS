---
- name: Rollback Multi-App Stack to Previous Versions
  hosts: app_servers
  become: true

  vars:
    # remote_app_dir, db_user, db_password, db_name, db_root_password
    # are expected to be available from group_vars/all.yml

  tasks:
    - name: Ensure deployment directory exists on remote server
      ansible.builtin.file:
        path: "{{ remote_app_dir }}"
        state: directory
        mode: '0755'

    - name: Check if previous versions file exists
      ansible.builtin.stat:
        path: "{{ remote_app_dir }}/versions.yml.previous"
      register: previous_version_file_stat

    - name: Fail if previous versions file does not exist
      ansible.builtin.fail:
        msg: "Rollback cannot proceed: {{ remote_app_dir }}/versions.yml.previous not found. Was there a previous deployment attempt?"
      when: not previous_version_file_stat.stat.exists

    - name: Load previous application versions from remote versions.yml.previous
      ansible.builtin.slurp:
        src: "{{ remote_app_dir }}/versions.yml.previous"
      register: slurped_previous_versions

    - name: Set previous versions as facts
      ansible.builtin.set_fact:
        loaded_versions: "{{ slurped_previous_versions['content'] | b64decode | from_yaml }}"
      when: previous_version_file_stat.stat.exists

    - name: Check if previous backend source archive exists
      ansible.builtin.stat:
        path: "{{ remote_app_dir }}/apps/backend.previous.tar.gz"
      register: previous_backend_archive_stat

    - name: Restore previous backend app source
      block:
        - name: Remove current backend app source directory
          ansible.builtin.file:
            path: "{{ remote_app_dir }}/apps/backend/"
            state: absent

        - name: Unarchive previous backend app source
          ansible.builtin.unarchive:
            src: "{{ remote_app_dir }}/apps/backend.previous.tar.gz"
            dest: "{{ remote_app_dir }}/apps/"
            remote_src: yes
            # This creates {{ remote_app_dir }}/apps/backend/
      when: previous_backend_archive_stat.stat.exists

    - name: Restore versions.yml.previous to versions.yml.current
      ansible.builtin.copy:
        remote_src: yes
        src: "{{ remote_app_dir }}/versions.yml.previous"
        dest: "{{ remote_app_dir }}/versions.yml.current"
        force: yes
      when: previous_version_file_stat.stat.exists # Ensure previous version file exists

    # This task assumes the frontend files in the current Jenkins checkout are appropriate
    # for the versions being rolled back to. If apps/frontend/html/ was deleted or not committed,
    # this task might fail or copy unintended files. Added ignore_errors.
    - name: Copy frontend HTML content to remote server (for rollback)
      ansible.builtin.copy:
        src: ../../apps/frontend/html/ # Source from the Ansible controller (Jenkins workspace)
        dest: "{{ remote_app_dir }}/frontend_html/" # Destination on vm2
        mode: '0644'
      ignore_errors: true # In case frontend files don't exist in checkout for the rolled-back state

    - name: Display versions to be deployed for rollback
      ansible.builtin.debug:
        msg:
          - "ROLLING BACK TO:"
          - "Frontend (Nginx): {{ loaded_versions.image_versions.nginx }}"
          - "Backend (Python): {{ loaded_versions.image_versions.python_backend }}"
          - "Database (MySQL): {{ loaded_versions.image_versions.mysql }}"
      when: loaded_versions is defined and loaded_versions.image_versions is defined

    - name: Generate docker-compose.yml on remote server from template (for rollback)
      ansible.builtin.template:
        src: templates/docker-compose.yml.j2
        dest: "{{ remote_app_dir }}/docker-compose.yml"
        mode: '0644'
      vars:
        image_versions: "{{ loaded_versions.image_versions }}"
      when: loaded_versions is defined and loaded_versions.image_versions is defined

    - name: Run docker compose up -d (for rollback - with build)
      community.docker.docker_compose_v2:
        project_src: "{{ remote_app_dir }}"
        state: present
        remove_orphans: yes
        build: yes  # Force a build, which will use the restored backend source
        recreate: smart # Recreate services if their configuration or image changed
      register: compose_status
      when: loaded_versions is defined # Only run if we successfully loaded versions

    - name: Display Docker Compose status (for rollback)
      ansible.builtin.debug:
        var: compose_status
      when: loaded_versions is defined 