services:
  frontend:
    image: "{{ image_versions.nginx }}"
    container_name: frontend_app
    ports:
      - "80:80" # Exposes frontend (nginx) on port 80 of vm2
    volumes:
      - ./frontend_html:/usr/share/nginx/html # Mount custom html
    networks:
      - app_network
    restart: unless-stopped
    # If you were building from a local Dockerfile on vm2 (less common for this setup):
    # build:
    #   context: ./apps/frontend # Path relative to docker-compose.yml on vm2
    #   dockerfile: Dockerfile

  backend:
    image: "{{ image_versions.python_backend }}"
    build:
      context: ./apps/backend # Path to Dockerfile and source, relative to this docker-compose.yml
      dockerfile: Dockerfile
    container_name: backend_app
    ports:
      - "5000:5000" # Exposes backend on port 5000 of vm2
    environment:
      - DATABASE_URL=mysql://{{ db_user }}:{{ db_password }}@database:3306/{{ db_name }}
      # Add other environment variables as needed
    depends_on:
      - database
    networks:
      - app_network
    restart: unless-stopped
    # If building locally:
    # build:
    #   context: ./apps/backend
    #   dockerfile: Dockerfile

  database:
    image: "{{ image_versions.mysql }}" # e.g., mysql:latest
    container_name: database_service
    environment:
      MYSQL_ROOT_PASSWORD: "{{ db_root_password | default('supersecretrootpassword') }}" # It's better to set this explicitly
      MYSQL_DATABASE: "{{ db_name }}"
      MYSQL_USER: "{{ db_user }}"
      MYSQL_PASSWORD: "{{ db_password }}"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app_network
    ports:
      - "3306:3306" # Expose DB port only if needed externally from vm2
    restart: unless-stopped

networks:
  app_network:
    driver: bridge

volumes:
  mysql_data: # Persists database data 